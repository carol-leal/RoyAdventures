// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    image         String?
    email         String?   @unique
    emailVerified DateTime?
    birthDate     DateTime?
    weight        Int?
    height        Int?
    gender        String?
    exercise      Exercise[]
    roy           Roy[]
    accounts      Account[]
    sessions      Session[]
    exerciseCategories ExerciseCategory[]
}

model Exercise {
    id         String   @id @default(cuid())
    name       String
    time       Int
    distance   Int?
    calories   Int?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    userId     String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    avgPace      Float?
    avgSpeed     Float?
    avgHeartRate Int?
    maxHeartRate  Int?
    categoryId String?
    category   ExerciseCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model ExerciseCategory {
    id String @id @default(cuid())
    name String
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    exercises Exercise[]

    @@unique([userId, name])
}

model Roy {
    id         String   @id @default(cuid())
    userId     String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    level      Int
    experience Int
    class      String
    healthPoints Int
    armorClass Int
    strength   Int
    dexterity  Int
    constitution Int
    intelligence Int
    wisdom     Int
    charisma   Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
